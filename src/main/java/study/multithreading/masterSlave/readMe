

主仆模式
是一个基于分而治之（Divide and conquer）思想的设计模式，将原任务分解为若干个语义相同的子任务，并由工作者线程来并行
执行这些任务。
应用场景：
1.并行计算，原始任务是通过组合每个Slave实例的处理结果；
2.容错处理，原始任务是任意一个Slave实例成功处理的结果（失败的不返回）；
3.计算精度，原始任务是所有Slave实例中处理结果不精确性最低的一个结果。

由于后两者使用的Slave实例对应着不同的实现，为了保证Slave参与者在类型数量上对Master实例的影响，需要在Slave参与者中
使用策略模式，使所有的Slave参与者都有一个共同的接口。

好处：
1.提高性能咯
2.使用策略模式，修改Slave实例对Master参与者影响小，Master对子任务的分解，派发、组合也不会影响到Salve实例

子任务处理结果的收集：
1.使用存储仓库进行收集仓库是一个Master和Slave都可以访问的数据结构，子任务将处理结果存入仓库，等待Master取
2.使用Promise模式，是Slave参与者的subService返回Promise实例。

Slave参与者的负载均衡和工作窃取：
1.一般规模事先可知的话，根据CPU平摊即可
2.任务规模不克制，可使用简单的轮询算法
3.Slave实例运行时，可用工作窃取模式从动态调整各个Slave实例的负载。
